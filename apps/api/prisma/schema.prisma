generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                      @id @default(uuid())
  email                      String                      @unique
  password                   String?
  firstName                  String
  lastName                   String
  playaName                  String?
  profilePicture             String?
  role                       UserRole                    @default(PARTICIPANT)
  isEmailVerified            Boolean                     @default(false)
  verificationToken          String?
  resetToken                 String?
  resetTokenExpiry           DateTime?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  allowDeferredDuesPayment   Boolean                     @default(false)
  allowEarlyRegistration     Boolean                     @default(false)
  allowNoJob                 Boolean                     @default(false)
  allowRegistration          Boolean                     @default(true)
  city                       String?
  country                    String?
  emergencyContact           String?
  internalNotes              String?
  phone                      String?
  stateProvince              String?
  loginCode                  String?
  loginCodeExpiry            DateTime?
  campingOptionRegistrations CampingOptionRegistration[]
  payments                   Payment[]
  registrations              Registration[]
  emailAudit                 EmailAudit[]
  adminAuditRecords          AdminAudit[]                @relation("AdminAuditRecords")

  @@map("users")
}

// Camp model has been removed

model CampingOption {
  id                 String                           @id @default(uuid())
  name               String
  description        String?
  enabled            Boolean                          @default(true)
  workShiftsRequired Int                              @default(0)
  participantDues    Float
  staffDues          Float
  maxSignups         Int                              @default(0)
  fields             CampingOptionField[]
  registrations      CampingOptionRegistration[]
  jobCategories      CampingOptionJobCategory[]
  createdAt          DateTime                         @default(now())
  updatedAt          DateTime                         @updatedAt

  @@map("camping_options")
}

model CampingOptionField {
  id              String                    @id @default(uuid())
  displayName     String
  description     String?
  dataType        FieldType
  required        Boolean                   @default(false)
  maxLength       Int?
  minValue        Float?
  maxValue        Float?
  order           Int                       @default(0)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  campingOptionId String
  fieldValues     CampingOptionFieldValue[]
  campingOption   CampingOption             @relation(fields: [campingOptionId], references: [id], onDelete: Cascade)

  @@map("camping_option_fields")
}

model CampingOptionFieldValue {
  id             String                    @id @default(uuid())
  value          String
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  fieldId        String
  registrationId String
  field          CampingOptionField        @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  registration   CampingOptionRegistration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@map("camping_option_field_values")
}

model CampingOptionRegistration {
  id              String                    @id @default(uuid())
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  userId          String
  campingOptionId String
  fieldValues     CampingOptionFieldValue[]
  campingOption   CampingOption             @relation(fields: [campingOptionId], references: [id])
  user            User                      @relation(fields: [userId], references: [id])

  @@map("camping_option_registrations")
}

model CampingOptionJobCategory {
  id              String        @id @default(uuid())
  campingOptionId String
  jobCategoryId   String
  createdAt       DateTime      @default(now())
  campingOption   CampingOption @relation(fields: [campingOptionId], references: [id], onDelete: Cascade)
  jobCategory     JobCategory   @relation(fields: [jobCategoryId], references: [id], onDelete: Cascade)

  @@unique([campingOptionId, jobCategoryId])
  @@map("camping_option_job_categories")
}

model JobCategory {
  id             String                     @id @default(uuid())
  name           String                     @unique
  description    String?
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  alwaysRequired Boolean                    @default(false)
  location       String?
  staffOnly      Boolean                    @default(false)
  jobs           Job[]
  campingOptions CampingOptionJobCategory[]

  @@map("job_categories")
}

model Job {
  id               String            @id @default(uuid())
  name             String
  location         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  categoryId       String
  shiftId          String
  maxRegistrations Int
  alwaysRequired   Boolean           @default(false)
  staffOnly        Boolean           @default(false)
  category         JobCategory       @relation(fields: [categoryId], references: [id])
  shift            Shift             @relation(fields: [shiftId], references: [id])
  registrations    RegistrationJob[]

  @@map("jobs")
}

model Shift {
  id               String         @id @default(uuid())
  name             String
  description      String?
  startTime        String         // HH:MM format (24-hour time)
  endTime          String         // HH:MM format (24-hour time)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  dayOfWeek        DayOfWeek
  jobs             Job[]

  @@map("shifts")
}

model Registration {
  id        String             @id @default(uuid())
  status    RegistrationStatus @default(PENDING)
  year      Int
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  userId    String
  user      User               @relation(fields: [userId], references: [id])
  jobs      RegistrationJob[]
  payments  Payment[]

  @@map("registrations")
}

model RegistrationJob {
  id             String       @id @default(uuid())
  registrationId String
  jobId          String
  createdAt      DateTime     @default(now())
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  job            Job          @relation(fields: [jobId], references: [id])

  @@unique([registrationId, jobId])
  @@map("registration_jobs")
}

model Payment {
  id             String          @id @default(uuid())
  amount         Float
  currency       String          @default("USD")
  status         PaymentStatus   @default(PENDING)
  provider       PaymentProvider
  providerRefId  String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         String
  registrationId String?
  user           User            @relation(fields: [userId], references: [id])
  registration   Registration?   @relation(fields: [registrationId], references: [id])

  @@map("payments")
}

model Notification {
  id        String             @id @default(uuid())
  type      NotificationType
  content   String
  recipient String
  status    NotificationStatus @default(PENDING)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@map("notifications")
}

model EmailAudit {
  id               String         @id @default(uuid())
  recipientEmail   String
  ccEmails         String?
  bccEmails        String?
  subject          String
  notificationType NotificationType
  status           EmailAuditStatus
  errorMessage     String?
  sentAt           DateTime?
  userId           String?
  createdAt        DateTime       @default(now())
  user             User?          @relation(fields: [userId], references: [id])

  @@map("email_audit")
}

model AdminAudit {
  id               String                  @id @default(uuid())
  adminUserId      String
  actionType       AdminAuditActionType
  targetRecordType AdminAuditTargetType
  targetRecordId   String
  oldValues        Json?
  newValues        Json?
  reason           String?
  transactionId    String?
  createdAt        DateTime                @default(now())
  adminUser        User                    @relation("AdminAuditRecords", fields: [adminUserId], references: [id])

  @@map("admin_audit")
}

model CoreConfig {
  id                       String     @id @default(uuid())
  campName                 String
  campDescription          String?
  homePageBlurb            String?
  campBannerUrl            String?
  campBannerAltText        String?
  campIconUrl              String?
  campIconAltText          String?
  registrationYear         Int
  earlyRegistrationOpen    Boolean    @default(false)
  registrationOpen         Boolean    @default(false)
  registrationTerms        String?
  allowDeferredDuesPayment Boolean    @default(false)
  stripeEnabled            Boolean    @default(false)
  stripePublicKey          String?
  stripeApiKey             String?
  paypalEnabled            Boolean    @default(false)
  paypalClientId           String?
  paypalClientSecret       String?
  paypalMode               PaypalMode @default(SANDBOX)
  smtpHost                 String?
  smtpPort                 Int?
  smtpUser                 String?
  smtpPassword             String?
  smtpSecure               Boolean    @default(false)
  senderEmail              String?
  senderName               String?
  emailEnabled             Boolean    @default(false)
  timeZone                 String     @default("UTC")
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt

  @@map("core_config")
}

enum UserRole {
  ADMIN
  STAFF
  PARTICIPANT
}

enum FieldType {
  STRING
  MULTILINE_STRING
  INTEGER
  NUMBER
  BOOLEAN
  DATE
}

enum DayOfWeek {
  PRE_OPENING
  OPENING_SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  CLOSING_SUNDAY
  POST_EVENT
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  WAITLISTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  MANUAL
}

enum NotificationType {
  EMAIL_VERIFICATION
  EMAIL_AUTHENTICATION
  EMAIL_CHANGE
  PASSWORD_RESET
  REGISTRATION_CONFIRMATION
  REGISTRATION_ERROR
  PAYMENT_CONFIRMATION
  SHIFT_REMINDER
  EMAIL_TEST
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum EmailAuditStatus {
  SENT
  FAILED
  DISABLED
}

enum PaypalMode {
  SANDBOX
  LIVE
}

enum AdminAuditActionType {
  REGISTRATION_EDIT
  REGISTRATION_CANCEL
  PAYMENT_REFUND
  WORK_SHIFT_ADD
  WORK_SHIFT_REMOVE
  WORK_SHIFT_MODIFY
  CAMPING_OPTION_ADD
  CAMPING_OPTION_REMOVE
  CAMPING_OPTION_MODIFY
}

enum AdminAuditTargetType {
  REGISTRATION
  USER
  PAYMENT
  WORK_SHIFT
  CAMPING_OPTION
}
