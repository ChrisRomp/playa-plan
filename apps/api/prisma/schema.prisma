// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User models
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String?
  firstName         String
  lastName          String
  playaName         String?
  profilePicture    String?
  phone             String?
  city              String?
  stateProvince     String?
  country           String?
  emergencyContact  String?
  role              UserRole  @default(PARTICIPANT)
  isEmailVerified   Boolean   @default(false)
  allowRegistration Boolean   @default(true)
  allowEarlyRegistration Boolean @default(false)
  allowDeferredDuesPayment Boolean @default(false)
  allowNoJob        Boolean   @default(false)
  internalNotes     String?
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  loginCode         String?
  loginCodeExpiry   DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  registrations     Registration[]
  payments          Payment[]
  campingOptionRegistrations CampingOptionRegistration[]

  @@map("users")
}

enum UserRole {
  ADMIN
  STAFF
  PARTICIPANT
}

// Camp models
model Camp {
  id          String   @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String
  capacity    Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  shifts      Shift[]
  campingOptions CampingOption[]

  @@map("camps")
}

// Camping Option models
model CampingOption {
  id                String   @id @default(uuid())
  name              String
  description       String?
  enabled           Boolean  @default(true)
  workShiftsRequired Int     @default(0)
  participantDues   Float
  staffDues         Float
  maxSignups        Int      @default(0) // 0 = unlimited
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  campId            String
  camp              Camp     @relation(fields: [campId], references: [id])
  jobCategoryIds    String[] // Array of category IDs
  fields            CampingOptionField[]
  registrations     CampingOptionRegistration[]

  @@map("camping_options")
}

// Camping Option Field models
model CampingOptionField {
  id              String   @id @default(uuid())
  displayName     String
  description     String?
  dataType        FieldType
  required        Boolean  @default(false)
  maxLength       Int?
  minValue        Float?
  maxValue        Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  campingOptionId String
  campingOption   CampingOption @relation(fields: [campingOptionId], references: [id], onDelete: Cascade)
  fieldValues     CampingOptionFieldValue[]

  @@map("camping_option_fields")
}

enum FieldType {
  STRING
  MULTILINE_STRING
  INTEGER
  NUMBER
  BOOLEAN
  DATE
}

// Camping Option Field Value models - stores user responses to custom fields
model CampingOptionFieldValue {
  id              String   @id @default(uuid())
  value           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  fieldId         String
  field           CampingOptionField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  registrationId  String
  registration    CampingOptionRegistration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@map("camping_option_field_values")
}

// Camping Option Registration models - connects users to camping options
model CampingOptionRegistration {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  campingOptionId String
  campingOption   CampingOption @relation(fields: [campingOptionId], references: [id])
  fieldValues     CampingOptionFieldValue[]

  @@map("camping_option_registrations")
}

// Job Category model
model JobCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  location    String?
  staffOnly   Boolean  @default(false)
  alwaysRequired Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobs        Job[]

  @@map("job_categories")
}

// Job models
model Job {
  id          String     @id @default(uuid())
  name        String
  description String?
  location    String
  staffOnly   Boolean    @default(false)
  alwaysRequired Boolean @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  categoryId  String
  category    JobCategory @relation(fields: [categoryId], references: [id])
  shifts      Shift[]

  @@map("jobs")
}

enum DayOfWeek {
  PRE_OPENING
  OPENING_SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  CLOSING_SUNDAY
  POST_EVENT
}

// Shift models
model Shift {
  id          String   @id @default(uuid())
  startTime   DateTime
  endTime     DateTime
  maxRegistrations  Int
  dayOfWeek   DayOfWeek
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  campId      String
  camp        Camp     @relation(fields: [campId], references: [id])
  jobId       String
  job         Job      @relation(fields: [jobId], references: [id])
  registrations Registration[]

  @@map("shifts")
}

// Registration models
model Registration {
  id        String   @id @default(uuid())
  status    RegistrationStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  shiftId   String
  shift     Shift    @relation(fields: [shiftId], references: [id])
  payment   Payment? @relation(fields: [paymentId], references: [id])
  paymentId String?  @unique

  @@map("registrations")
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  WAITLISTED
}

// Payment models
model Payment {
  id            String        @id @default(uuid())
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  provider      PaymentProvider
  providerRefId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  registration  Registration?

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
}

// Notification models
model Notification {
  id        String            @id @default(uuid())
  type      NotificationType
  content   String
  recipient String
  status    NotificationStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("notifications")
}

enum NotificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  REGISTRATION_CONFIRMATION
  PAYMENT_CONFIRMATION
  SHIFT_REMINDER
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

// Core Configuration model
model CoreConfig {
  id              String    @id @default(uuid())
  
  // Camp Info
  campName        String
  campDescription String?
  homePageBlurb   String?
  campBannerUrl   String?
  campIconUrl     String?
  
  // Registration
  registrationYear Int
  earlyRegistrationOpen Boolean @default(false)
  registrationOpen Boolean @default(false)
  registrationTerms String?
  allowDeferredDuesPayment Boolean @default(false)
  
  // Payment Processing
  stripeEnabled   Boolean @default(false)
  stripePublicKey String?
  stripeApiKey    String?
  stripeWebhookSecret String?
  paypalEnabled   Boolean @default(false)
  paypalClientId  String?
  paypalClientSecret String?
  paypalMode      PaypalMode @default(SANDBOX)
  
  // Email Configuration
  smtpHost        String?
  smtpPort        Int?
  smtpUser        String?
  smtpPassword    String?
  smtpSecure      Boolean @default(false)
  
  // Site Configuration
  timeZone        String @default("UTC")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("core_config")
}

enum PaypalMode {
  SANDBOX
  LIVE
}